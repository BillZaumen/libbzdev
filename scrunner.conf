# scrunner configuration file.
#
# The file consists of a series of sections separated by top-level
# directives.  The top-level directives are
# 
#    %java
#    %defs
#    %classpath.component
#
# The directives %defs and %classpath.component start a new section whereas
# the directive %java does not - it simply provides a single value that
# appears on the same line. The directive is
#
#    %java PATH
#
# where PATH is the location of the java command to use and is a special case
# as its value appears on the same line.  The other directives are terminated
# by either another top-level directive or the directive
#
#    %end
#
# If a %java directive is missing, the standard search path is used. On most
# systems, this is equivalent to
#
# %java /usr/bin/java
#
# The %definitions section allows one to Add Java property definitions
# (See the -DNAME=VALUE option for the program 'java').  The format of
# each line defining a property is:
#
#   NAME = VALUE
#
# (whitepace before or after the '=' symbol and at the beginning and
# end of the line is ignored). For each value, some substitions are 
# made:
# 
#   ~/  at the start of VALUE is replaced with the user's home directory,
#       followed by '/'.
#   ~  is replaced with the user's home directory when VALUE consists of
#      this single character.
#   ~~ is replaced with ~ when ~~ appears at the start of VALUE
#
# If "~" appears elsewhere in VALUE, it is not changed with one exception
# described below:
#
# The definition
#
# java.ext.dirs = PATH
#
# should be used to set the path used to search for extensions. The
# path consists of a series of directory names separated by the
# path-separator character (":" on Unix/Linux systems). This is useful
# primarily for testing new version of the library - in a typical
# installation, the library will be placed in the extensions directory.
# the use of the "~" character described above applies to the start
# of each path component, not just the start of the line, for the
# java.ex.dirs case.
#
# Definitions can also be declared to be scripting-language dependent.  For
# this case, each definition after a line starting with
#
# %lang LNAME
#
# (and ending with either a line containing another %lang declaration
# the %end declaration delimiting the definition section, or another
# top-level directive) applies only when the scripting language whose
# official name is LNAME is used.  Language-specific definitions are
# provided in case a scripting-language implementation requires
# specific Java properties to be set.
#
%defs
%end
# Classpath Entries:
#
# Classpath entries are specified in a %classpath.component section.
# Each line should name a jar file or a class-file directory.  If the
# file-name component of a path name is "*", then all jar files in that
# directory are included in the path.  Leading and trailing whitespace
# is ignored. For each line, some substitions are made for the 
# following initial sequences of characters:
# 
#   ~/  is replaced with the user's home directory, followed by '/'
#   ~  (followed by optional whitespace) is replaced with the user's home
#      directory).
#   ~~ is replaced with ~
# If "~" appears elsewhere in the line, it is not replaced.
#
# Within the %classpath.component section, there may be a series
# of %lang sections, each starting with 
#
# %lang NAME
#
# where NAME is the name of the language. Jar files or directories
# in a language-specific section refer to jar files or directories
# that contain packages that are needed by libraries associated with
# a scripting language.  The jar files or directories needed to
# initialize a scripting language or determine if it is available
# must be in the non-language-specific part of the %classpath.component
# section.
#
%classpath.component
%end
