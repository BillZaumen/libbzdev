package org.bzdev.devqsim;
import java.util.*;

/**
 * Event indicating a change in the state of a simulation or one of
 * its objects.

 */
public class SimulationStateEvent extends EventObject {

    /**
     * The type of the simulation state event.
     */
    public static enum Type {
	/**
	 * One of a simulation's 'run' methods has been called
	 */
	SIM_START,
	    /**
	     * A simulation 'run' method has returned
	     */
	    SIM_STOP,
	    /**
	     * A message is about to be received
	    RECEIVE_START,
	    /**
	     * A message has just been received.
	    RECEIVE_END,
	     */
	    /**
	     * A Callable's call method is starting to run.
	     */
	    CALL_START,
	    /**
	     * A Callable's call method has run to completion
	     */
	    CALL_END,
	    /**
	     * A task has started
	     */
	    TASK_START,
	    /**
	     * A task has paused.
	     */
	    TASK_PAUSE,
	    /**
	     * A task has resumed after a pause
	     */
	    TASK_RESUME,
	    /**
	     * A task has completed.
	     */
	    TASK_END,
	    /**
	     * A task queue has started to process an entry.
	     */
	    TASKQUEUE_START,
	    /**
	     * A task queue has paused while processing an entry.
	     */
	    TASKQUEUE_PAUSE,
	    /**
	     * A task queue has resumed processing an entry.
	     */
	    TASKQUEUE_RESUME,
	    /**
	     * A task queue has completed processing an entry.
	     */
	    TASKQUEUE_STOP,
	    /**
	     * A server has been selected by a service queue.
	     */
	    SERVER_SELECTED,
	    /**
	     * A server is processing a request.
	     */
	    SQ_INTERACTION,
	    /**
	     * After any server interaction, a Callable described by
	     * a tag is being processed. The Callable is no longer
	     * associated with the queue at this point.
	     *
	     */
	    SQ_CALLABLE,
	    /**
	     * After any server interaction, a Runnable described by
	     * a tag is being processed. The Runnable is no longer
	     * associated with the queue at this point.
	     */
	    SQ_RUNNABLE,
	    /**
	     * After any server interaction, the task that was queued
	     * is restarted. The task is no longer associated with the
	     * queue at this point.
	     */
	    SQ_TASK,

    }

    Simulation sim;
    // Type type;
    Enum<?> type;
    Object origin = null;
    Object parameter = null;
    Object server = null;

    /**
     * Get the source of the event.
     * The source is the object that directly caused the event to be sent
     * @return the source of the event
     */
    @SuppressWarnings("unchecked")
    public <T> T getSource(Class<T> clazz) {
	return (T) getSource();
    }
    
    /**
     * Get the type of the event.
     * @param clazz the class of the type, which must be an enum
     * @return the type of the event; null if the event does not have
     *         the specified type
     */
    public <T extends Enum<T>> T getType(Class<T> clazz) {
	try {
	    return clazz.cast(type);
	} catch (ClassCastException cce) {
	    return null;
	}
    }

    // public Type getType() {return type;}

    /**
     * Get the simulation associated with the event.
     * @return the simulation
     */

    public Simulation getSimulation() {return sim;}

    /**
     * Get an event's origin.
     * The origin is an object that was responsible for the event
     * being generated by the source. It's meaning depends on the
     * type of event.
     * @return the origin
     */
    public Object getOrigin() {return origin;}

    /**
     * Get an event's origin as a specific type.
     * The origin is an object that was responsible for the event
     * being generated by the source. It's meaning depends on the
     * type of event.
     * @param clazz the class (or a superclass) of the origin
     * @return the origin
     */
    @SuppressWarnings("unchecked")
    public <T> T getOrigin(Class<T> clazz) {
	return (T) origin;
    }

    /**
     * Get the event parameter.
     * @return the parameter.
     */
    public Object getParameter() {return parameter;}

    /**
     * Get the server associated with an event.
     * A server in this case is an object that implements a server used by
     * a server queue in the simulation.
     * @return the server
     */
    public Object getServer() {return server;}


    /**
     * Get the event parameter, cast to a specific type
     * @param clazz the class (or a superclass) of the parameter.
     * @return the parameter.
     */
    @SuppressWarnings("unchecked")
    public <T> T getParameter(Class<T>clazz) {return (T) parameter;}


    /**
     * Constructor.
     * @param source the event source
     * @param sim the simulation
     * @param type the type of the event.
     * @param origin the object that originated the event
     * @param parameter an event parameter (usage depends on the type)
     */
    public SimulationStateEvent(Object source, Simulation sim, Enum<?> type,
				Object origin,
				Object parameter) {
	super(source);
	this.sim = sim;
	this.type = type;
	this.origin = origin;
	this.parameter = parameter;
    }

    /**
     * Constructor.
     * @param source the event source
     * @param sim the simulation
     * @param server the server (valid for a queue server)
     * @param type the type of the event.
     * @param origin the object that originated the event
     * @param parameter an event parameter (usage depends on the type)
     */
    public SimulationStateEvent(Object source, Simulation sim,
				Object server,
				Enum<?> type,
				Object origin,
				Object parameter) {
	super(source);
	this.sim = sim;
	this.server = server;
	this.type = type;
	this.origin = origin;
	this.parameter = parameter;
    }
}

//  LocalWords:  Callable's Runnable clazz enum getType superclass
