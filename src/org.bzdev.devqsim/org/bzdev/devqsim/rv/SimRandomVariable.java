package org.bzdev.devqsim.rv;
import java.util.Spliterator;
import org.bzdev.devqsim.Simulation;
import org.bzdev.devqsim.DefaultSimObject;
import org.bzdev.math.rv.RandomVariable;
import org.bzdev.obnaming.NamedRandomVariableOps;

/**
 * Base class for named objects representing random variables.
 * The type parameters are
 * <UL>
 *   <LI> T - the type of the values generated by the random variable
 *   <LI> RV - the type of the random variable
 * </UL>
 */
public abstract class SimRandomVariable<T,RV extends RandomVariable<T>>
    extends DefaultSimObject
    implements NamedRandomVariableOps<T,RV>
{
    /**
     * Constructor.
     * @param sim the simulation
     * @param name the name of the object; null for an automatically generated
     *        name
     * @param intern true if the object can be looked up by using the methods
     * in {@link org.bzdev.devqsim.Simulation Simulation}; false otherwise.
     * @exception IllegalArgumentException typically means a name is already
     *            in use
     * @see org.bzdev.devqsim.Simulation#getObject(String,Class)
     */
    protected SimRandomVariable(Simulation sim, String name, boolean intern) {
	super(sim, name, intern);
    }

    /**
     * Constructor given a random variable.
     * @param sim the simulation
     * @param name the name of the object; null for an automatically generated
     *        name
     * @param intern true if the object can be looked up by using the methods
     * @param rv the random variable itself
     * in {@link org.bzdev.devqsim.Simulation Simulation}; false otherwise.
     * @exception IllegalArgumentException typically means a name is already
     *            in use
     * @see org.bzdev.devqsim.Simulation#getObject(String,Class)
     */
    protected SimRandomVariable(Simulation sim, String name, boolean intern,
				RV rv)
    {
	super(sim, name, intern);
	this.rv = rv;
    }

    RandomVariable<?> rv;

    /**
     * Get the random variable that this named object represents.
     * @return the random variable
     */
    public RV getRandomVariable() {
	return (RV) rv;
    }

    /**
     * Set the random variable.
     * Typically this will be called in a constructor, not elsewhere.
     * @rv the random variable itself
     */
     protected void setRV(RandomVariable<?> rv) {
	this.rv = rv;
    }

    /**
     * Get a spliterator for a specified number of values.
     * @param size the number of random values to provide
     * @return the spliterator
     */
    public Spliterator<T> spliterator(long size) {
	return ((RV) rv).spliterator(size);
    }

    /**
     * Get a spliterator for an infinite number of values.
     * @return the spliterator
     */
    public Spliterator<T> spliterator() {
	return ((RV) rv).spliterator();
    }

}

//  LocalWords:  IllegalArgumentException getObject rv
