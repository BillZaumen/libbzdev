releasePolicy =  This parameter\'s value is an enumeration constant \
        whose type is <JDOC>org.bzdev.devqsim.TaskQueue.ReleasePolicy</JDOC>. \
        A release policy describes how the count of the number of entries \
        that may be released from a queue are treated as entries are removed \
        from the queue.  A release is in progress starting with a call \
        to one of the release-initiation methods: \
        forceRelease, release, releaseUpTo, or forceReleaseUpTo. \
        A release ends when the release count becomes zero or when the \
        the method clearReleaseCount  has been called. The values for \
	this parameter are as follows: \
        <ul> \
          <li> <CODE>CANCELS_IGNORED</CODE> - after a call to a \
               release-initiation method, newly canceled events do \
               not change the number of events that will be \
               released. \
          <li> <CODE>CANCELS_AS_RELEASED</CODE> - after a call to a \
               release-initiation method, newly canceled events will \
               be counted as released events. \
          <li> <CODE>REPLACE_CANCELS</CODE> - after a call to a \
               release-initiation method, when an event is \
               processed, newly added events replace newly canceled \
               events, and the difference is counted as released \
               events.  The counts of newly added and newly canceled \
               events are reset to zero every time an event on the \
               queue is processed successfully.  This policy is \
               intended for cases in which existing events are \
               canceled and new ones added at the same time. \
        </ul> \
        The default is <CODE>CANCELS_IGNORED</CODE>.

deletePolicy = This parameter\'s value is an enumeration whose type is \
        <JDOC>org.bzdev.devqsim.QueueDeletePolicy</JDOC>. The enumeration \
        constants are \
        <ul> \
          <li> <CODE>MUST_BE_EMPTY</CODE> - the queue must be empty \
               and not processing any more elements before it can be \
               deleted. \
          <li> <CODE>WHEN_EMPTY</CODE> - the queue will not accept \
                new entries after the delete() method is called, \
                with the actual deletion postponed until the queue \
                is empty. \
          <li> <CODE>NEVER</CODE> - the queue may not be deleted. \
        </ul> \
        The default is <CODE>WHEN_EMPTY</CODE>.

#  LocalWords:  releasePolicy forceRelease releaseUpTo ul li
#  LocalWords:  forceReleaseUpTo clearReleaseCount deletePolicy
