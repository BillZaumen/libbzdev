package org.bzdev.math.rv;
import org.bzdev.math.StaticRandom;

//@exbundle org.bzdev.math.rv.lpack.RV

/**
 * Integer-valued random variable with a Poisson distribution.
 * If X is a random variable with a Poisson distribution that has a
 * parameter &lambda;, the the probability that X = k is given by
 * <blockquote>
 * (&lambda;<sup>k</sup>e<sup>-&lambda;</sup>)/k!  
 * </blockquote>
 * The sequence of integers generated by instances of this class
 * are values of k with the distribution given above.
 * <P>
 * The algorithms used are
 * <ul>
 *   <li> Table lookup: used for &lambda;&le;745 and when a table
 *        is available.  A table, if not currently cached, is created
 *        when &lambda; &le; 745 and the second argument of the
 *        two-argument constructor has the value <code>true</code>.
 *        The table may be removed by the garbage collector, although the
 *        method {@link org.bzdev.math.PoissonTable#add(double)} can be used
 *        to create a persistent table.  This algorithm is basically
 *        inverse transform sampling with pre-computed values and a
 *        binary search to find the inverse. The limit on &lambda; is
 *        set by numerical-accuracy constraints.
 *   <li> Inverse transform sampling: used for &lambda;&le;18. The inverse
 *        is found by computing the CDF for increasing values of k until
 *        the value for the CDF is larger than a uniformly distributed
 *        random number (computed once).
 *   <li> The PTRD algorithm (Wolfgang H&ouml;rmann, "The Transformed
 *        Rejection Method for Generating Poisson Random Variables,"
 *        page 6, Virtschaftsuniversit&auml;t Wien, April 1992,
 *        <a href="http://epub.wu.ac.at/352/1/document.pdf">
 *        http://epub.wu.ac.at/352/1/document.pdf</a>): used for
 *        18 &lt; &lambda; &lt; 2<sup>25</sup>.
 *   <li> Approximation via a normal distribution: used for
 *        &lambda; &ge; 2<sup>25</sup>.
 * </ul>
 * 
 */
public class PoissonIntegerRV extends IntegerRandomVariable {

    static String errorMsg(String key, Object... args) {
	return RVErrorMsg.errorMsg(key, args);
    }

    double lambda;
    double sqrtLambda;
    boolean mode;

    static final double MAX_LAMBDA =
	(int)(Math.round((double)Integer.MAX_VALUE
			 - 10.0 * Math.sqrt((double)Integer.MAX_VALUE)));
    
    // Limit for Knuth's algorithm; above that, use a normal distribution
    static final double LIMIT = 32.0;


    /**
     * Get the mean value for the random-variable.
     * @return the mean value
     */
    public double getMean() {
	return lambda;
    }

    /**
     * Get the standard deviation for the random variable.
     * @return the standard deviation
     */
    public double getSDev() {
	return sqrtLambda;
    }

    /**
     * Constructor.
     * @param lambda the rate of the Poisson distribution (equal to its
     *        mean and to its variance).
     */
    public PoissonIntegerRV(double lambda) {
	this(lambda, false);
    }
    /**
     * Constructor with a mode to allow tables to be allocated.
     * If tables are requested and the value of lambda is too large, the
     * request will be ignored.
     * @param lambda the rate of the Poisson distribution (equal to its
     *        mean and to its variance)
     * @param mode true if tables should be allocated to improve execution
     *        speed; false otherwise
     */
    public PoissonIntegerRV(double lambda, boolean mode) {
	if (lambda < 0.0) throw new IllegalArgumentException
			      (errorMsg("lambdaNotNegative", lambda));
	if (lambda > MAX_LAMBDA) throw new IllegalArgumentException
				     (errorMsg("lambdaTooLarge", lambda));
	this.lambda = lambda;
	this.mode = mode;
	sqrtLambda = Math.sqrt(lambda);
    }

    /**
     * Get the next value.
     * @return an integer giving a value from a Poisson distribution
     */
    public Integer next() {
	return StaticRandom.poissonInt(lambda, mode);
    }
}

//  LocalWords:  exbundle blockquote ul li le pre CDF PTRD ouml rmann
//  LocalWords:  Virtschaftsuniversit auml Wien href lt ge
//  LocalWords:  lambdaNotNegative lambdaTooLarge
