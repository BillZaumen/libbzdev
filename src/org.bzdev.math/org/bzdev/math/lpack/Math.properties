argsOutOfRange2 = Arguments (%d, %d) out of range
firstArgTooLarge = First argument (%d) is too large
firstArgNotPositive = First argument (%d) must be positive
firstArgNotZero = First argument("%d") should have been zero
argNonNegative = Argument must not be negative (was %d)
argNonNegative1 = First argument must not be negative (was %d)
argNonNegative2 = Second argument must not be negative (was %d)
argNonNegative3 = Third argument must not be negative (was %d)
argNonNegative4 = Fourth argument must not be negative (was %d)
argNonNegative5 = Fifth argument must not be negative (was %d)
argNonNegativeD = Argument must not be negative (was %g)
argNonNegativeD1 = First Argument must not be negative (was %g)

bothZero = Arguments %d and %d are both zero

intArgNotPositive = Argument must be larger than 0 (was %d)
argNotPositive = Argument must be larger than 0 (was %g)
wrongNumberArgs = Wrong number of arguments
first2ArgsMustBeZero = First two arguments must be zero
zeroArgument2 = An argument was zero: (%d,%d)
relativelyPrime = The arguments (%d, %d) are not relatively prime
secondArgZero = Second argument is zero
thirdArgZero = Third argument is zero
fourthArgZero = Fourth argument is zero
tooFewPoints = Too few points (%d but need at least %d)
argGtArrayLen = Argument "%d" larger than array length
argOutOfRangeI = Argument "%d" out of range
argOutOfRangeD = Argument "%g" out of range
closedOutOfRangeI = Argument does not satisfy %d <= %d <= %d
bracketing = Bracketing error
noInverse = No inverse
noInverseFor No inverse for %g
noUniqInverse = No unique inverse
noUniqInverseFor = No unique inverse for %g
notStrictlyMono = Spline does not approximate a strictly monotonic function
derivOrder = order of a derivative out of range
unexpectedArrayLen = Array has the wrong length: %d
notBetweenN1P1 = Argument %d not in the range (-1, 1): %g

firstArgNeg = First argument %g was negative
firstArgNegI = First argument %d was negative
secondArgNeg = Second argument %g was negative
secondArgNegI = Second argument %d was negative
secondArgPos = Second argument %g must be larger than 0.0
thirdArgPos = Third argument %g must be larger than 0.0
thirdArgNeg = Third argument %g was negative
thirdArgNegI = Third argument %d was negative
fourthArgNeg = Fourth argument %g was negative
fourthArgNegI = Fourth argument %d was negative
sixthArgNegI = Sixth argument %d was negative
seventhArgNegI = Seventh argument %d was negative

secondGTfirst = The second argument is larger than the first: %d > %d

thirdArgOutOfRange = Third argument (%g) out of range
forthArgOutOfRange = Forth argument (%d) out of range
argTooLarge = Argument (%d) is too large

illformedPolynomial = A polynomial is ill-formed
notQuartic = Quartic polynomial expected
notReducedQuartic A reduced quartic polynomial was expected
noFactors = Could not factor: h2 = %s
illegalCarlsonParms = Illegal arguments: one or more of p1=%d, p2=%d, p5=%d
notIntegrableAC = Cannot integrate: a=%g < 0 when c = 0
notIntegrableABXC = Cannot integrate: ax+b < 0 when c = 0, a=%g, b=%g, x=%g
notIntegrableRoots = Cannot integrate: roots r1=%g >= 0, r1 < x > x, x=%g
notIntegrableRoots2 = Cannot integrate: roots x < r1=%g or x > r2=%g > 0, x=%g
notIntegrableRoot = Cannot integrate: 0 < r2 <= x, root r2=%g, x=%g
notIntegrableNoRoots = Cannot integrate: no roots but c < 0 (c = %g)
notIntegrableLog = Cannot integrate: sqrt(X) + x*sqrt(c) + b/(2*sqrt(c)) = %g
notIntegrableXNeg = Cannot integrate: polynomial is negative at %g
notIntegrableXZero = Cannot integrate: polynomial is negative at zero
notIntegrableAsin = Cannot integrate: arcsin argument is near \u00B11
degreeError1 = The degree of 2nd argument is %d (expecting 0, 1, or 2)
degreeError2 = The degrees of 2nd argument is %d (expecting 0 or 2)
degreeError3 = The degrees of 3rd  argument is %d (expecting 0 or 2)
degreeError = The degrees of 2nd and 3rd arguments are %d and %d.
badFactoring = Factoring during integration failed: %s != %s
badDescr = Integration failed due to a factor having a root (desr = %s)
badMinValue = Integration failed: one factor has a minimum close to zero



sameArray = Two argument arrays are identical

needSquareMatrix = Matrix must be a square matrix

vectLenNotPositive = A vector-length argument was 0 or negative: %d
vectorOffset = Array of length %d but dimension %d and offset %d
vectorLengths = Vectors do not have the same dimensions (array lengths)
zeroNorm = Vector with zero norm
argArrayTooShort = Array passed as argument too short
argArray1TooShort = First argument is null or an array that is too short
argArray1TooShortNN = First argument is an array that is too short
argArray2TooShort = Second argument is null or an array that is too short
argArray3TooShort = Third argument is null or an array that is too short
argArray4TooShort = Fourth argument is null or an array that is too short
floatingPointErr = Floating-point error (numerical accuracy)
argSubArrayTooShort = A subarray of an array passed as an argument is too \
		    short (row index = %d)
needNonsingular = Matrix must be nonsingular
wrongVectorLen = wrong length for vector(s)
missingRows = Matrix does not have enough rows
missingARow  = Matrix is missing a row
wrongRowSize = Matrix rows have the wrong size
colTooShort = A matrix column is too short
rowTooShort = A matrix row is too short
flatMatrixTooShort = array storing a matrix is too short for the specified \
		   dimensions: %d is less than %d*%d
notMatrix = Argument is not a matrix
pivotPermErr = Pivot/Permutation error
notPositiveDefinite = Not positive definite: sqrt(%3$s) at [%1$d][%2$d]

vectorElement = Vector element out of range
illFormedPerm = Illformed permutation
cycleTooLong = Cycle too long
badCycle = Ill-formed cycle
arraySizeForPerm = Array dimensions not compatible with permutation

nullArg = Argument(s) were null
nullArg2 = Argument 2 was null
nullArg3 = Argument 3 was null
wrongDegree4 = The degree of the polynomial argument was not 4
incompatibleArrays = Arrays are not compatible
incompatiblePerms = Permutations not compatible with each other \
		 (lengths differ)

functionNotSupported = Function not supported
numberNotReturned = Scripting object did not return a number
booleanNotReturned = Scripting object did not return a Boolean
callFailsArg = Call failed for argument (%g)
opNotSupported = Operation not supported
functionEvalFailedBrent = Function evaluation failed using Brent\'s method
callFailsArg2 = Call failed for arguments (%g, %g)
callFailsArg3 = Call failed for arguments (%g, %g, %g)
callFailsArgVA = Call failed (script exception)

solutionNotBracketed = Solution not bracketed
newtonNotProg = Newton\'s method not progressing
fdFailed = Function or derivative failed
newtonNotConv = Newton\'s method not converging
functionEvalNewton = Function evaluation error during Newton\'s method
halleyNotProg = Halley\'s method not progressing
halleyNotConv = Halley\'s method not converging
functionEvalHalley = Function evaluation error during Halley\'s method
arg4NaN = The forth argument is not a number

linearlyDependent = Linearly dependent
needAtLeast3Unknowns = Cyclic tridiagonal equations must have at least \
		     3 unknowns
tridiagonalIter = Tridiagonal-solver iteration error
functionMissing = Function missing
mappingMissing = Mapping missing

initLength = Array length must be 16, 13, or 12
nullInitSubArray = The subarray at index %d is null

arrayLengthNot3 = An array\'s length was not 3
offsetOutOfRange = An offset was out of range

zeroArgumentError = Method or constructor must have at least 1 argument

notInDomainTwo = Arguments (%g, %g) are not in the function\'s domain
notInDomainThree = Arguments (%g, %g, %g) not in the function\'s domain
minArgLength = A real valued function does not take as many arguments as \
	     needed
rvfArgLen = A real-valued function does not take the number of arguments \
	  requested
badLimitForLMA = The limit for LMA was zero or negative
argArrayLengthsDiffer = Argument arrays were of different lengths
iterationLimitExceeded = Too many iterations

nullMode = A Mode argument was null

incompatibleArrayLengths = Array arguments have incompatible lengths
knotSpanEmpty = The first knot (%s) must have a value smaller than the value \
	      of the last knot (%s)
cptsNotMultipleOfDim = Control-point array length %d is not a multiple of %d
cptsWrongLength = Control-point array length should be %d, not %d
degreeTooLarge = The degree %d must be less than the  of control points %d

notRealPow = The value %g raised to the %d/%d power is not a real number
nonIntegerExponent = Exponent %g is not an integer
argNotInts2 = Argument %g or %g is not numerically equal to an integer
argRatioNotInts2 = Argument %d/%d or %d/%d is not numerically equal to \
		 an integer
argRatioNumbNotInts2 = Argument %d/%d or %g is not numerically equal to \
		       an integer

arg3NotNegIntOrZero = Third argument %s must not be zero or a negative \
		    integer
arg4NotNegIntOrZero = Fourth argument %s must not be zero or a negative \
		    integer
arg5NotNegIntOrZero = Fifth argument %s must not be zero or a negative \
		    integer
zTooLargeForIntCAB = In F(a=%g,b=%g;c=%g;z=%g), z >= 1.0 and c-a-b is an integer

tolNotSet = Tolerance was not set
tolNotSetForI = Tolerance was not set for dependent-variable index %d

gTooShort = Length of guess argument too short (%d < %d)

# MatrixOps
resultMatrixTooShort = Result matrix too short (%d < %d)
badDimensions = Result dimensions were (%d, %d), expecting (%d, %d)
lengthError = Array length was %d, expecting %d
expectingSquare = A matrix should have been a square matrix
dimensions = The matrix dimensions do not allow this operation
vectors = Vector elements not consistent
offsets = Offsets overlap or too close to the end of an array
notSquare = Operation performed in place requires a square matrix
dimlen = Matrix dimensions and array lengths not consistent

#Service providers
spError = Error in service provider
serviceName = No %s service named "%s"
lengthError2 = length of argument %d less than that for argument %d
maxFFTLength = maximum FFT transform length exceeded
tooSmall = Argument %d too small
tooShort = Argument %d too short
zeroOffset = Argument 3 negative or not smaller than the length of argument 2
notPowerOf2 = Argument %d is not a power of 2.
noService = No service that satisfies the constraints
nullFFTMode = The mode was null
noFFT = No FFT available for the specified arguments

# QR Decomp
wrongDimQR = The number of rows %d was <= the number of columns %d
nullMatrix = The matrix argument was null
noRows = The matrix argument does not have any rows
noCols = The matrix argument does not have any columns
wrongRowDim = The matrix argument has the wrong number of rows (%d \u2260 %d)
rankDeficient = This QR decomposition is rank deficient

#PoissonTable
lambdaWasNegative = The argument lambda (%g) must not be negative
lambdaTooLarge  = The argument lambda (%g) is too large for an \
		integer representation
lambdaTooLargeLong  = The argument lambda (%g) is too large for a \
		long representation

lambdaTooLargePT = The argument lambda (%g) is too large for a PoissonTable

# StaticRandom
notRVClass = Class argument %s is not a random-variable class
createRVFailed = Could not create a random variable

# LocalWords:  argsOutOfRange firstArgTooLarge firstArgNotPositive
# LocalWords:  firstArgNotZero argNonNegative argNonNegativeD sqrt
# LocalWords:  intArgNotPositive argNotPositive wrongNumberArgs arg
# LocalWords:  ArgsMustBeZero zeroArgument relativelyPrime noInverse
# LocalWords:  secondArgZero thirdArgZero fourthArgZero tooFewPoints
# LocalWords:  argGtArrayLen argOutOfRangeI argOutOfRangeD argArray
# LocalWords:  closedOutOfRangeI noInverseFor noUniqInverse TooShort
# LocalWords:  noUniqInverseFor notStrictlyMono secondArgNeg subarray
# LocalWords:  secondArgPos thirdArgOutOfRange forthArgOutOfRange NaN
# LocalWords:  argTooLarge needSquareMatrix argArrayTooShort badCycle
# LocalWords:  argSubArrayTooShort needNonsingular nonsingular LMA
# LocalWords:  wrongVectorLen missingRows missingARow wrongRowSize
# LocalWords:  colTooShort rowTooShort flatMatrixTooShort notMatrix
# LocalWords:  pivotPermErr notPositiveDefinite vectorElement nullArg
# LocalWords:  illFormedPerm Illformed cycleTooLong arraySizeForPerm
# LocalWords:  incompatibleArrays incompatiblePerms numberNotReturned
# LocalWords:  functionNotSupported booleanNotReturned callFailsArg
# LocalWords:  opNotSupported functionEvalFailedBrent callFailsArgVA
# LocalWords:  solutionNotBracketed newtonNotProg fdFailed initLength
# LocalWords:  newtonNotConv functionEvalNewton halleyNotProg dimlen
# LocalWords:  halleyNotConv functionEvalHalley linearlyDependent FFT
# LocalWords:  needAtLeast tridiagonal tridiagonalIter mappingMissing
# LocalWords:  functionMissing nullInitSubArray arrayLengthNot noFFT
# LocalWords:  offsetOutOfRange zeroArgumentError notInDomainTwo
# LocalWords:  notInDomainThree minArgLength rvfArgLen badLimitForLMA
# LocalWords:  argArrayLengthsDiffer iterationLimitExceeded nullMode
# LocalWords:  incompatibleArrayLengths knotSpanEmpty cptsWrongLength
# LocalWords:  cptsNotMultipleOfDim degreeTooLarge notRealPow spError
# LocalWords:  nonIntegerExponent argNotInts argRatioNotInts tooSmall
# LocalWords:  argRatioNumbNotInts NotNegIntOrZero zTooLargeForIntCAB
# LocalWords:  tolNotSet tolNotSetForI gTooShort MatrixOps notSquare
# LocalWords:  resultMatrixTooShort badDimensions lengthError Decomp
# LocalWords:  expectingSquare serviceName maxFFTLength tooShort
# LocalWords:  zeroOffset notPowerOf noService nullFFTMode wrongDimQR
# LocalWords:  nullMatrix noRows noCols wrongRowDim rankDeficient
# LocalWords:  PoissonTable lambdaWasNegative lambdaTooLarge zeroNorm
# LocalWords:  lambdaTooLargeLong lambdaTooLargePT StaticRandom
# LocalWords:  notRVClass createRVFailed derivOrder secondArgNegI
# LocalWords:  thirdArgPos thirdArgNeg thirdArgNegI fourthArgNeg
# LocalWords:  secondGTfirst illformedPolynomial sameArray TooShortNN
# LocalWords:  vectLenNotPositive vectorOffset vectorLengths
# LocalWords:  floatingPointErr
