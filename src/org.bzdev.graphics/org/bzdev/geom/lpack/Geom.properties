nullPathIterator = Path iterator argument was null
lessThanZero = value out of range (%g < 0)
lessThanEqZero = value out of range (%g <= 0)

nullCondition = The condition was null
negativeLimit = The limit was negative
segmentIndex = A segment index was out of range: %d
negativeFlatness = the flatness was negative

nullArg = Argument %d was null
zeroLengthPath = Argument %d is a path with zero length
noTangent = Argument %d is a path without a tangent
noArcParallel = tangents parallel and in the same direction
noArcPossible = A single arc not possible given the tangents
nullTangent = An array providing a tangent was null
tangentLength = Array length for argument %d is too short
tangentOffset = Offset in argument %d out of range: %d
maxDelta = The last parameter is not in the range (0, 2\u03c0/3] : %g
colinear = Colinear center and arc points (%g, %g), (%g, %g), (%g, %g)
tangentNormal = A tangent and normal vector were not perpendicular
unknownSegmentType = Segment type %d not recognized
endingMOVETO = Path ends with a SEG_MOVETO segment.

missingMOVETO = Initial MOVE_TO missing
missingSEGMOVETO = Initial SEG_MOVETO missing
multipleSEGMOVETO = Multiple SEG_MOVETO segments at path start

noSegsBeforeClose = Missing segments before SEG_CLOSE
cpsNotTerm = Control-point sequence not terminated
cpsNeedsSEGEND = Control-point sequence must be terminated by \
	       CPointType SEG_END or SEG_END_NEXT
cpsTooLong = Too many consecutive control points

cporder = Control points out of order: %s

afterMOVETONEXT = CPointType.MOVE_TO_NEXT must be followed by either \
		  CPointType.SPLINE or CPointType.SPLINE_FUNCTION
afterSEGENDNEXT = CPointType.SEG_END_NEXT must be followed by either \
		  CPointType.SPLINE or CPointType.SPLINE_FUNCTION
beforeSEGENDNEXT = CPointType.SEG_END_NEXT must not be the first \
		 control point
termSEGENDNEXT = Sequence must not end in a CPoint whose type is \
	       CPointType.SEG_END_NEXT

badSEGENDPREV = CPointType.SEG_END_PREV out of place

badLocation = A basic spline path location is no longer valid

spsNotTerm = Spline-point sequence must be terminated by \
	   CPointType.SEG_END, CPointType.SEG_END_PREV, or \
	   CPointType.CLOSE
unknownCPT = Unknown CPointType

segAfterClose = segment or move added after CPointType.CLOSE

illPlacedClose = A CPointType.CLOSE would form a cycle when other
	      segments not part of that cycle exist

intermediateClose = A CPoint array or list contains a sublist with \
		  segments following a CPointType.CLOSE segment

badSegClose = A segment after a SEG_CLOSE segment is not a SEG_MOVETO segment

integerMin5 = Value %d \\u2264 4

argOutOfRange12 Arguments %g and/or %g out of range
argOutOfRange = Argument %g out of range
argOutOfRange2 = Argument out of range (%g or %g or both)
argOutOfRange2i = Argument out of range (%g or %d or both)
argOutOfRange2ii = Argument out of range (%d or %d or both)
argOutOfRange1i = Argument %d out of range

badSwitch = Bad case in switch statement
emptyPath = Empty path
piSEGMOVETO = Path does not start with SEG_MOVETO
segsAfterClose = Segments cannot follow SEG_CLOSE

arg1OutOfRange = First argument "%g" out of range
piUnknown = Unrecognized path-iterator type

segNumbOutOfRange = Segment number out of range

illFormedPath = Ill-formed path
notSimpleClosedPath = Path does not consist of a single, closed loop
zeroAreaPath = Path has zero area or crosses itself

numbSegsNotPos = Number of segments "%d" is not a positive number
domainErr2 = [%g, %g] not in the domain of an x or y function
arrayLengths = Array lengths differ (%d \\u2260 %d)
arrayLengths3 = Array lengths differ (%d,  %d, %d not equal)

wrongWindingRule = The winding rule must be WIND_NON_ZERO

noMoveTo = a MOVETO operation is not allowed
stUnknown = Path-iterator type %s not allowed

wrongType = The type %s is not allowed
nullFunction = A RealValuedFunctOps or RealValuedFunction argument was null
nullNamedFunctionOps = A named function was null
nNotPositive = the number of points (%d) at which the functions must be \
	     evaluated must be positive
emptyPathOnClose = A path should not be empty when closePath() is called

twoArgsAreMinus1 = Two arguments are equal to -1

splineLengthsDiffer = Splines must have the same number of knots

notClosedManifold = This Shape3D is not a closed manifold
notOriented = This Shape3D is not an oriented manifold
notWellFormed = This Shape3D is not well formed
unknownType = Unknown type (%d)

illegalIndex = 	The index %d is out of range[0, %d).
illegalComponentIndex = The component index %d is out of range [0,%d)
unrecognizedPath3DType = Not a recognized subclass of Path3D
freeBarycentric = Too many free barycentric coordinates

u1GTu2 = first path parameter larger than second
startGTend = Starting segment index larger than ending segment index
startNegative = The starting segment index was negative
endNegative = The ending segment index was negative
iterationError = Attempt to iterate past the last iteration
needMoveTo = A MOVE_TO segment type was expected
misplacedClose = A SEG_CLOSE appeared in the wrong place.
misplacedMoveTo A SEG_MOVETO appeared in the wrong place.
badClose = coordinates not consistent with a SEG_CLOSE
nullFunct2 = a real-valued function with two arguments was null
nullFunct3 = a real-valued function with three arguments was null

# Bezier Grid
vertexuc = Incorrect end points for spline at (%d, %d), U direction
vertexvc = Incorrect end points for spline at (%d, %d), V direction
vertexnuc = Spline in U direction missing at (%d, %d)
vertexnvc = Spline in V direction missing at (%d, %d)
vertexnnuc = Unexpected spline in U direction at (%d, %d)
vertexnnvc = Unexpected spline in V direction at (%d, %d)
noOut = Error on output stream passed to badSplines
splineNotStarted = The spline was not started
splineSpecTooShort = A spline must require at least 2 points
cannotCloseSpline = Inappropriate current indices (%d != %d and %d != %d)
expectingMoveTo = Expecting current type of SEG_MOVETO
vertexNaN = A coordinate at (%d, %d) is not a number
linearWithPatch = Called setPatch on a linear BezierGrid
linearStartSpline = Called startSpline on a linear BezierGrid
linearSetRegion = Called setRegion on a linear BezierGrid
cyclic = cyclic
nonCyclic = non cyclic
spline = Spline %d (%s)
bgfrozen = The grid\'s points and splines cannot be modified
incompleteSpline = A user-defined spline has not been terminated
emptySpline = Called endSpline when no spline has been started
argarray = Either an array was null or too short or its offset was negative
noindUVPoint = No point at grid vertex (%d, %d)
uvRange = Grid point (%d,%d) out of range
oddArgs = The number of arguments must be even
inormalNeeded = An initial normal vector is needed
tangentKink = Tangent is not a continuous vector-valued function: segment %d
noStartingTangent = A starting tangent could not be found
parallelT = Initial normal vector is parallel to the tangent (%g,%g,%g)
outOfPlane = Normal vector not perpendicular to tangent: off %g deg.
noTangentForPath = No tangent: path index %d
arrayRegions = Array regions overlap

argarraylength = The array passed as the third argument is too short or null
widthHeight = At least one height/width argument is out of range: %d, %d

scripting = Scripting not supported
illformedConfig = A path-builder configuration was ill formed

noResource = Resource "%s" could not be found
wrongSpline = Found the wrong spline at indices(%d,%d)
oddIndexCount = Called with an odd number of indices
badRegionLen = Region length = %d, expecting %d (%s)
afterLoop = After loop on boundary

bgSpline = Spline knot duplicated at BezierGrid vertex (%d, %d)
bgSplineDiag = Spline indices not rectilinear: (%d, %d)\u2192(%d, %d)
noBoundaryForGrid = A boundary for this grid could not be computed
bgIndicesPairs = final index arguments must be in pairs

fourthArgNeg = Fourth argument was negative

noFunctions = All function arguments were null
firstArgLT1 = The first argument was less than 1
subiterIndex = The surface-iterator index was out of range: %d not in [0, %d]
index = An index is out of range: %d not in [0, %d)
index2 = An index is out of range
shapeNotClosedManifold = The shape is not a closed manifold
shapeNotOriented = The shape is not an oriented manifold
zeroVolume = The volume argument was zero

afMap1 =  the second and third arguments are not orthogonal vectors
afMap2 =  the fifth and sixth arguments are not orthogonal vectors

badMoments = Moments not symmetric
surfaceIntegral = Surface integral parameter mismatch

# ConvexPathConnector
innerNotConvex = Planar projection of the inner path is not a convex path
outerNotConvex = Planar projection of the outer path is not a convex path
innerPathEmpty = The inner path was empty
outerPathEmpty = The outer path was empty
vertexVisibility = Vertex not visible: inner=(%g, %g, %g), outer=(%g, %g, %g)
innerNotClosed = The inner path is not a closed path
outerNotClosed = The outer path is not a closed path
innerNotContinuous = The inner path is not a continuous path
outerNotContinuous = The inner path is not a continuous path
innerPathNull = The inner path was null
outerPathNull = The outer path was null
graphWrite = Could not write to %s


#  LocalWords:  nullPathIterator lessThanZero missingMOVETO SEG PREV
#  LocalWords:  cpsNotTerm cpsNeedsSEGEND CPointType cpsTooLong arg
#  LocalWords:  afterMOVETONEXT afterSEGENDNEXT beforeSEGENDNEXT GTu
#  LocalWords:  termSEGENDNEXT CPoint badSEGENDPREV spsNotTerm MOVETO
#  LocalWords:  unknownCPT segAfterClose illPlacedClose integerMin
#  LocalWords:  argOutOfRange badSwitch emptyPath piSEGMOVETO DType
#  LocalWords:  segsAfterClose OutOfRange piUnknown segNumbOutOfRange
#  LocalWords:  illFormedPath notSimpleClosedPath zeroAreaPath Bezier
#  LocalWords:  numbSegsNotPos domainErr arrayLengths noMoveTo noOut
#  LocalWords:  wrongWindingRule stUnknown wrongType nullFunction
#  LocalWords:  RealValuedFunctOps RealValuedFunction nNotPositive
#  LocalWords:  nullNamedFunctionOps emptyPathOnClose closePath afMap
#  LocalWords:  twoArgsAreMinus splineLengthsDiffer notClosedManifold
#  LocalWords:  notOriented notWellFormed unknownType freeBarycentric
#  LocalWords:  illegalComponentIndex unrecognizedPath barycentric
#  LocalWords:  vertexuc vertexvc vertexnuc vertexnvc vertexnnuc
#  LocalWords:  vertexnnvc badSplines splineNotStarted vertexNaN
#  LocalWords:  splineSpecTooShort cannotCloseSpline expectingMoveTo
#  LocalWords:  nonCyclic bgfrozen argarraylength widthHeight nullArg
#  LocalWords:  illformedConfig noResource lessThanEqZero noTangent
# LocalWords:  zeroLengthPath noArcParallel noArcPossible nullTangent
# LocalWords:  tangentLength tangentOffset maxDelta colinear Colinear
# LocalWords:  cporder badLocation intermediateClose sublist argarray
# LocalWords:  badSegClose illegalIndex incompleteSpline noindUVPoint
# LocalWords:  uvRange oddArgs inormalNeeded tangentKink parallelT
# LocalWords:  noStartingTangent outOfPlane bgSpline BezierGrid
# LocalWords:  bgSplineDiag noBoundaryForGrid bgIndicesPairs badClose
# LocalWords:  fourthArgNeg noFunctions firstArgLT subiterIndex
# LocalWords:  shapeNotClosedManifold shapeNotOriented zeroVolume
# LocalWords:  ConvexPathConnector innerNotConvex outerNotConvex
# LocalWords:  innerPathEmpty outerPathEmpty vertexVisibility
# LocalWords:  innerNotClosed outerNotClosed innerNotContinuous
# LocalWords:  outerNotContinuous innerPathNull outerPathNull
# LocalWords:  nullCondition negativeLimit segmentIndex tangentNormal
# LocalWords:  negativeFlatness startGTend startNegative endNegative
# LocalWords:  iterationError needMoveTo misplacedClose nullFunct
# LocalWords:  misplacedMoveTo noTangentForPath arrayRegions setPatch
# LocalWords:  badMoments surfaceIntegral graphWrite endingMOVETO
# LocalWords:  unknownSegmentType missingSEGMOVETO multipleSEGMOVETO
# LocalWords:  noSegsBeforeClose linearWithPatch linearStartSpline
# LocalWords:  startSpline linearSetRegion setRegion emptySpline
# LocalWords:  endSpline wrongSpline oddIndexCount badRegionLen
# LocalWords:  afterLoop
