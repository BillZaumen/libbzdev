cap = This parameter\'s value, the type of a line-segment cap, is \
    one of the following enumeration constants defined by the \
    enumeration <JDOC>org.bzdev.obnaming.misc.BasicStrokeParm.Cap</JDOC>: \
    <UL> \
      <LI><CODE>BUTT</CODE>. Subpaths and dash segments end with no \
           added decoration. \
      <LI><CODE>ROUND</CODE>. Subpaths and dash segments end with a round \
           decoration. \
      <LI><CODE>SQUARE</CODE>.Subpaths and dash segments end with a \
           square decoration that extends half the line width beyond the \
           end of each subpath or dash segment. \
    </UL>

join = This parameter\'s value, the type of the method used to join line \
     segments, is one of the following enumeration constants defined \
     by <JDOC>org.bzdev.obnaming.misc.BasicStrokeParm.Join</JDOC>: \
     <UL> \
       <LI><CODE>BEVEL</CODE>. Connected path segments are joined by \
           connecting the outer corners of their outlines with a \
	   straight line segment. \
       <LI><CODE>MITER</CODE>. Connected path segments are joined by \
            extending the outer corners until they meet. \
       <LI><CODE>ROUND</CODE>. Connected path segments are joined by rounding \
            off the corner at a radius of half the line width. \
     </UL>

miterLimit = This parameter\'s value is the limit such that \
        a line join is trimmed \
        when the ratio of miter length to stroke width is \
        greater than this value. The miter length is the \
        diagonal length of the miter, which is the distance \
        between the inside corner and the outside corner of \
        the intersection. The smaller the angle formed by two \
        line segments, the longer the miter length and the \
        sharper the angle of intersection. The default \
        miterlimit value of 10.0 causes all angles less than \
        11 degrees to be trimmed. Trimming miters converts \
        the decoration of the line join to bevel. This values \
        applies only to a line join that has a MITER join \
        decoration, and must be larger than or equal to 1.0.

dashIncrement = The length is in either user-space units or \
	graph coordinate space units, depending on the value \
	of the parameter <CODE>gcsMode</CODE>.

dashPattern = The value of this parameter is a string. \
        If the string has a length of zero, the line \
        is solid. Otherwise the pattern should be represented \
        by a sequence of "-" or "&nbsp;" giving the length of \
        dashes or empty space respectively as multiples of \
        the value of dashIncrement.  Each "-" and each "&nbsp;" \
        represents a component of a segment whose length is \
        dashIncrement.  Thus, if dashIncrement is 10.0, then \
        the pattern "--&nbsp;-&nbsp;" will consist of a dash of length \
        20.0, a space of length 20.0, a dash of length 10.0, \
        and a space of length 10.0, with the pattern \
        repeating as needed.  Unless the dash pattern is a \
	string whose length is 0, the pattern must start with \
	a "-" instead of a "&nbsp;".

gcsMode = The value of this parameter indicates whether the \
	width, dashPhase, and dashIncrement are provided in \
        graph coordinate space or user space.  The value \
	<code>true</code> indicates graph coordinate space \
	and the value <code>false</code> (the default) indicates \
	user space.

#  LocalWords:  Subpaths subpath miterLimit miterlimit dashPattern
#  LocalWords:  nbsp dashIncrement
