notNull = The argument was not the string "null"
notBoolean = The argument was not "true" or "false"
notLong = The argument is not a long
notInt = The argument is not an int
notIntLong = The argument is not an int or a long
notDouble = The argument is not a double 
notNumber = The argument is not an int, long, or double

# ExpressionParser
nullArg = Argument %d was null
notIntElement = A dimension passed to newJavaArray was not an integer
notPosElement = A dimension passed to newJavaArray was negative
noArray = Class representing an array is not expected: %s
noMethodF = No function named "%s" with %d argument(s)
noMethodM = No method named "%s" with %d argument(s)
NoStreamMethod = No method named "%s" with %d arguments(s) for a stream
noUseableMethod = No replacement in a public class/interface for %s.%s
wrongNumbArgsM = Wrong number of arguments for a method: %d instead of %d
wrongNumbArgsF = Wrong number of arguments for a method: %d instead of %d
noMethodC = No constructor named "%s" with %d argument(s)
notMethodName = "%s" is not the name of a method
notCalled = "%s" was not called - no following argument list
noClass = No class named "%s"
ambiguousClass = Multiple classes match "%s"
illformedClassName = Ill-formed class name: "%s"
noClasses = No classes for the function named "%s" with %d argument(s)
noClassName = The function named "%s" with %d argument(s)  is \
	      missing a class name
multConstr = Multiple Constructors match %s
multMethF = Multiple functions match %s
blockedConstructor = Constructor not allowed - was explicitly blocked
blockedMethod = Method not allowed - was explicitly blocked
missingClassName = Class name expected
noSorterC = No choices for a constructor named "%s" with %d argument(s)
noSorterResultC = No constructor named "%s" with the given %d argument(s)
noSorterF = No choices for a function named "%s" with %d argument(s)
noSorterResultF = No function named "%s" with the given %d argument(s)
noSorterM = No choices for a method named "%s" with %d argument(s)
noSorterResultM = No method named "%s" with the given %d argument(s)
toIntFromDouble = Cannot convert "%s" to an int
toLongFromDouble = Cannot convert "%s" to a long
toIntSize = The number "%s" is outside the range allowed for an int
nonNumberReturned = A call to "%s" did not return a number.
notAllowedReturnType = A call to "%s" returned an unrecognized type: %s
notAllowedClass =  Objects of class "%s" cannot be constructed
fcallFailed = A call to "%s" with %d argument(s) failed (see cause)
vnameWasClassname = A variable may not be a class name: %s
fnameWasClassname = A function name may not be a class name: %s
needInt = The number "%s" should be an int
intRange = The number "%s" is out of range for an int
adjacentOps = The operators "%s" and "%s" were adjacent
syntaxError = Syntax error
importReserved = The name 'import' is a reserved word
importBlocked = Import statements have been blocked
notRVF = "%s" can not implement a real-valued function with 1 argument
rvfFailed = %s(%s) failed (see cause)
notArrayOrObject = Expected a Java array, an EP array, or an EP object

activeComma = Misplaced comma: accessing an object property or array element
badComma = Misplaced comma
badOParen = Misplaced \'(\'
badCParen = Misplaced \')\'
badOBrace = Misplaced \'{\'
badCBrace = Misplaced \'}\'
badOBracket = Misplaced \'[\';
badCBracket = Misplaced \'];\'
missingOBrace = No opening \'{\' for a lambda expression
missingCBrace = No closing \'}\' for a lambda expression
missingLambda = Missing lambda expression after \'function\' keword
missingLambdaParams = Missing or incomplete lambda-expression parameter list
badLambdaParams = Parameter list for a lambda expression ill=formed
misplacedDot = Operator \'.\' not expected
misplacedThrow = The keyword "throw" is misplaced
badString = Ill-formed string
badNumber = Ill-formed number
unbalancedParens = Parenthesis not balanced
unbalancedBraces = Curly braces not balanced
unbalancedBrackets = Brackets not balanced
unterminatedVar = Incomplete \'::\', function, instanceof, or \'var\'
varEQ = An '=' or '?=' was expected
varEQOP = Illegal operator
badIdent = Ill-formed identifier or function
noValue = Variable "%s" not defined
noValue2 = Constant "%s" is ambiguous

alreadyDefined = Variable "%s" already defined
alreadyDefinedP = Parameter "%s" already defined
varEq = Keyword var must be followed by an identifier and then an \'=\'
notIndexed = Expecting an EP object, and EP array, or a Java array
indexAssigned = Assigning to an object that can be indexed failed
functBrace = Keyword \'function\' must be followed by an identifier \
	   and then an \'{\'
notVarIdent = Keyword var must be followed by a Java identifier
notFunctionIdent = Keyword function must be followed by a Java identifier
noStartingEq = An expression must start with "="
semicolon = Misplaced semicolon
badCondEnd = Misplaced \':\'
badCondNest = Conditional (?...:...) crosses lambda expression boundary
firstQMarkNull = A colon was detected with no initial question mark
missingColon = Operator \':\' is missing or misplaced
unbalancedParens = Parentheses not balanced
notBooleanBeforeQM = Value before \'?\' is not a boolean
fnameInUse = Function name in use: "%s"
notFunctName = Expecting a function name but saw "%s"
notPropName = Expecting a property name but saw "%s"
colonExpected = a colon is expected after a property name (saw \'%s\')
noColon = Ill-formed conditional: No \':\' after a \'?\'
badColon = Error in conditional that stopped processing
misplacedEq = Misplaced operator: "="
misplacedVar = Misplaced "var" keyword
noIdentAfterVar = An identifier must follow the keyword "var"
nestedCallM = The method "%s" was used where a returned value was expected
nestedCallP = A function "%s" was used where a returned value was expected
badMod = Illegal arguments in term: \'%s\' %% \'%s\'
badMathMod = Illegal arguments in term: \'%s\' %%%% \'%s\'
badUnicode = Illegal character in unicode escape
varExpectedBefore = A variable name must precede the "<=>" operator

expectingOpenParen = Expecting \'(\', found \'%s\'
noArgList = Function definition for "%s" missing an argument list
argListTerm = Argument list for function "%s" not terminated
argListChar = Argument list for function "%s" contained "%c"
notFunctionDef = A function name must follow the keyword "function"
wrongArgCnt = The function %s has %d argument(s), not %d
wrongArgCntM = The function implementing method "%s" has %d argument(s), not %d
missingMethod = No object property corresponding to method "%s"
missingFunct = The object property "%s" is not a function
modGlobal = Setting the global object is not allowed
modThis = Setting the variable "this" is not allowed
reservedIdent = The variable "%s" is reserved
valueStackEmpty = The value stack was empty
opStackEmpty = The operator stack was empty
noValueBeforeOp = No value before the operator "%s"
unexpectedEnd = Unexpected end of input
notIdentifier = Identifier expected
qmarkIndex = expecting the 1st '?' in a sequence of ternary operators

badImport = Import from package "%s" failed
badImportArg1 = First argument for 'import' is not a string
badImportArgCount = The import statement must have 1 or 2 arguments
noClassName1 = A class-name argument was null
invalidPkgOrClassName = Package "%s" or class name "%s" not recognized
finishImportFailed  = Completion of import failed

scriptingModeTooLate = Scripting mode was set too late
importModeTooLate = Import mode was set too late
globalModeTooLate = Global mode was set too late
noSuitableFIMethod = No functional-interface method for %s
notCompatible = %s does not return a %s subclass (see functional interface %s)
badFirstArg = %s not a subclass of %s: 1st argument of functional interface %s
noMatching = %s: no matching method or constructor for functional interface %s
notFI = %s used as an argument of type %s, which is not a functional interface
voidArg = A function or method argument does not have a value (was void)
notConsumer = Not a function or method reference  with 1 argument
notForEachConsumer = Illegal argument passed to the forEach method

addsComplete: New classes cannot be added
scriptingModeThread = Cannot set scripting mode from the current thread
importModeThread = Cannot set import mode from the current thread
scriptImportModeThread = Cannot set script-import mode from the current thread
addClassThreads = Cannot call addClass when multiple scripts are running
noImport = "Cannot import classes"
importSyntaxL = In an import statement, list elements must be strings
importSyntax2 = Import error: 2nd argument must be a string or a list of strings
noBindings = Bindings were null

noCommentEnd = A comment did not end
misplaced3Hashes = "\#\#\#" can appear only at the top level of a script.
emptyCCStack = Tried to pop a call-context stack when it was empty
nonIntLongN1 = Left-hand argument to a shift is not an integer: "%s"
nonIntLongN2 = Right-hand argument to a shift is not an integer: "%s"
nonIntegralN1 = Left-hand argument to a shift not recognized: "%s"
nonIntegralN2 = Right-hand argument to a shift not recognized: "%s"

methodRefFailed = Could not construct a method reference
nullMethodRefTarget = Cannot create a method reference for a null target
noMRClass = Processor does have class matching %s.%s(%s)
mRM1Failed = %s not assignable from %s (functional interface %s)

nullRow = Row %d  of a matrix is null
wrongRowLen = Row %d of a matrix has a length of %d instead of %d

docResource = org/bzdev/util/lpack/espdocs.tpl
unexpected = Unexpected Exception/Throwable
notGenerateDocsString = An element in the 2nd-argument list is not a string

expectedString2A = Second argument should be a JSArray of String elements

toStreamErr = Argument for toStream not int.class, long.class, or double.class

unbalancedT = Warning: too many \#-T directives
unbalancedS = Warning: too many \#-S directives

# LocalWords:  notNull notBoolean notLong notInt notIntLong notDouble
# LocalWords:  notNumber ExpressionParser noMethod noClasses noSorter
# LocalWords:  noClassName noSorterResult toIntFromDouble toIntSize
# LocalWords:  nonNumberReturned fcallFailed badComma badOParen varEq
# LocalWords:  badCParen badString emptyParens badIdent noValue EP nd
# LocalWords:  notVarIdent noStartingEq noMethodF noMethodM noMethodC
# LocalWords:  notMethodName noSorterC noSorterResultC noSorterF mRM
# LocalWords:  noSorterResultF noSorterM noSorterResultM needInt
# LocalWords:  toLongFromDouble notAllowedReturnType notAllowedClass
# LocalWords:  vnameWasClassname fnameWasClassname intRange notRVF
# LocalWords:  adjacentOps syntaxError rvfFailed badOBrace badCBrace
# LocalWords:  badOBracket badCBracket missingOBrace missingCBrace
# LocalWords:  missingLambda keword misplaceDot badNumber functBrace
# LocalWords:  unbalancedParens unbalancedBraces unbalancedBrackets
# LocalWords:  notFunctionIdent badCondEnd badCondNest missingColon
# LocalWords:  notBooleanBeforeQM boolean notPropName colonExpected
# LocalWords:  noColon Ill-formed badColon misplacedEq nestedCallM
# LocalWords:  nestedCallP expectingOpenParen noArgList argListTerm
# LocalWords:  argListChar notFunctionDef wrongArgCnt wrongArgCntM
# LocalWords:  missingMethod missingFunct notIntElement newJavaArray
# LocalWords:  notPosElement noArray noUseableMethod wrongNumbArgsM
# LocalWords:  wrongNumbArgsF notCalled noClass ambiguousClass varEQ
# LocalWords:  illformedClassName multConstr multMethF activeComma
# LocalWords:  missingClassName notArrayOrObject missingLambdaParams
# LocalWords:  badLambdaParams illformed misplacedDot misplacedThrow
# LocalWords:  unterminatedVar instanceof varEQOP alreadyDefined
# LocalWords:  alreadyDefinedP notIndexed indexAssigned notFunctName
# LocalWords:  firstQMarkNull misplacedVar noIdentAfterVar badMod
# LocalWords:  badUnicode unicode modGlobal modThis reservedIdent
# LocalWords:  valueStackEmpty opStackEmpty noValueBeforeOp badImport
p# LocalWords:  unexpectedEnd notIdentifier qmarkIndex badImportArg
# LocalWords:  badImportArgCount invalidPkgOrClassName notCompatible
# LocalWords:  finishImportFailed scriptingModeTooLate badFirstArg
# LocalWords:  importModeTooLate globalModeTooLate noSuitableFIMethod
# LocalWords:  noMatching notFI voidArg notConsumer forEach addClass
# LocalWords:  notForEachConsumer addsComplete scriptingModeThread
# LocalWords:  importModeThread scriptImportModeThread noImport
# LocalWords:  addClassThreads importSyntaxL importSyntax noBindings
# LocalWords:  noCommentEnd emptyCCStack nonIntLongN nonIntegralN
# LocalWords:  methodRefFailed nullMethodRefTarget noMRClass nullRow
# LocalWords:  wrongRowLen docResource Throwable expectedString
# LocalWords:  notGenerateDocsString JSArray
